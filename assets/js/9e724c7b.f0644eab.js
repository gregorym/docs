"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6723],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,h=m["".concat(s,".").concat(c)]||m[c]||u[c]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},36080:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var a=n(83117),r=(n(67294),n(3905));const i={},o="How to Airdrop Tokens",l={unversionedId:"guides/airdrops",id:"guides/airdrops",title:"How to Airdrop Tokens",description:"- Gumdrop",source:"@site/docs/04-guides/03-airdrops.md",sourceDirName:"04-guides",slug:"/guides/airdrops",permalink:"/guides/airdrops",draft:!1,editUrl:"https://github.com/metaplex/docs/tree/main/docs/04-guides/03-airdrops.md",tags:[],version:"current",lastUpdatedAt:1689287501,formattedLastUpdatedAt:"Jul 13, 2023",sidebarPosition:3,frontMatter:{},sidebar:"sidebar",previous:{title:"How to get Your Mint List",permalink:"/guides/mint-lists"},next:{title:"How to burn NFTs",permalink:"/guides/burn-nfts"}},s={},p=[{value:"Motivation",id:"motivation",level:2},{value:"Setup",id:"setup",level:2},{value:"Drop Types",id:"drop-types",level:2},{value:"Token Airdrop",id:"token-airdrop",level:3},{value:"NFT Candy Machine Pre-sale",id:"nft-candy-machine-pre-sale",level:3},{value:"Edition Prints",id:"edition-prints",level:3},{value:"Distribution Method",id:"distribution-method",level:2},{value:"Whitelist",id:"whitelist",level:2},{value:"Closing a Gumdrop",id:"closing-a-gumdrop",level:2},{value:"Deploy Custom Gumdrop Site",id:"deploy-custom-gumdrop-site",level:2}],d={toc:p};function u(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-airdrop-tokens"},"How to Airdrop Tokens"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#"},"Gumdrop"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#motivation"},"Motivation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#setup"},"Setup")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#drop-types"},"Drop Types"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#token-airdrop"},"Token Airdrop")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#nft-candy-machine-pre-sale"},"Candy Machine Pre-sale")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#edition-prints"},"Edition Prints")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#distribution-method"},"Distribution Method")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#whitelist"},"Whitelist")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#closing-a-gumdrop"},"Closing a Gumdrop")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#deploy-custom-gumdrop-site"},"Deploy Custom Gumdrop Site"))))),(0,r.kt)("p",null,"Gumdrop is a program from the Metaplex community. It is currently in BETA so use at your own risk."),(0,r.kt)("p",null,"The Gumdrop program leverages the Solana blockchain and merkle trees to\nfacilitate airdrops to a large number of whitelisted users at a low cost to\ncreators. Users have to redeem the airdrop, it will not automatically appear in their wallet."),(0,r.kt)("h2",{id:"motivation"},"Motivation"),(0,r.kt)("p",null,"Various ecosystem projects desire to ensure early followers and supporters gain\naccess to project assets whether they be tokens, NFTs, or others.\nSimultaneously, capitalization of these assets should not incur undue costs or\noperational overhead to the creators. There are several ways to achieve such a\nsetup and Gumdrop offers one that integrates with existing Solana and Metaplex\necosystem programs."),(0,r.kt)("p",null,"Gumdrop solves this efficient-airdrop issue by utilizing a space-efficient hash\nstructure (the merkle tree) such that an on-chain program can validate whether\nthe user is part of a whitelist. This uses a pull-based paradigm to shift the\nburden from creators, sending airdrops or pre-minting NFTs, to recipients, that\ncan choose to claim their portion or leave it for general adoption."),(0,r.kt)("p",null,"The approach, originally pioneered for token airdrops by\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/merkle-distributor"},"Uniswap")," and ported to Solana\nby ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/saber-hq/merkle-distributor"},"Saber"),", is extended to\nallow printing editions of a master copy.\nMoreover, Gumdrop allows creators to directly send whitelisted users a drop\nreclamation link by building the tree with off-chain handles (e.g email,\ndiscord, etc.) and allowing the user to redeem into any wallet."),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"Gumdrop creators can use either the Gumdrop CLI or the ",(0,r.kt)("a",{parentName:"p",href:"https://lwus.github.io/metaplex"},"web\nUI"),". Additional options are available through\nthe CLI. To execute the Gumdrop CLI or deploy a local version of the web UI,\nplease follow the same ",(0,r.kt)("a",{parentName:"p",href:"/deprecated/candy-machine-js-cli/getting-started#tooling-required"},"prerequisite steps of Candy Machine\ncreation"),". "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The CLI can be found in the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/metaplex-foundation/gumdrop/"},"Gumdrop\nrepo")," at\n",(0,r.kt)("inlineCode",{parentName:"li"},"packages/cli/src/gumdrop-cli.ts")," and will also be run with ",(0,r.kt)("inlineCode",{parentName:"li"},"ts-node"),"."),(0,r.kt)("li",{parentName:"ul"},"The web interface can be run locally from the Gumdrop\nrepo at ",(0,r.kt)("inlineCode",{parentName:"li"},"packages/gumdrop")," with ",(0,r.kt)("inlineCode",{parentName:"li"},"yarn start"),".\n(You can also use an ",(0,r.kt)("a",{parentName:"li",href:"https://lwus.github.io/metaplex"},"example deployment"),", but this site may not exist for long.)")),(0,r.kt)("p",null,"To create a drop, you must specify the ",(0,r.kt)("a",{parentName:"p",href:"#drop-types"},"drop type"),", the\n",(0,r.kt)("a",{parentName:"p",href:"#distribution-method"},"distribution method"),", and the\n",(0,r.kt)("a",{parentName:"p",href:"#whitelist"},"whitelist"),". When creating the drop, a throwaway ",(0,r.kt)("inlineCode",{parentName:"p"},"Keypair")," will be\ngenerated that holds authority over the on-chain Gumdrop state. This can be\nused to later ",(0,r.kt)("a",{parentName:"p",href:"#closing-a-gumdrop"},"close the gumdrop"),", so make sure to save it!"),(0,r.kt)("h2",{id:"drop-types"},"Drop Types"),(0,r.kt)("p",null,"There are multiple drop types supported by the gumdrop program. Each utilizes\nthe same underlying mechanism of building a merkle tree from a whitelist and\nusing some kind of off-chain distribution method to notify recipients."),(0,r.kt)("p",null,"The sections below give examples and explanations for CLI usage of the command\nline flags. A full list of options can be viewed with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ ts-node src/gumdrop-cli.ts help create\n")),(0,r.kt)("h3",{id:"token-airdrop"},"Token Airdrop"),(0,r.kt)("p",null,"All a token airdrop requires is approval to move the relevant tokens from the\nGumdrop creators' token account."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ ts-node src/gumdrop-cli.ts create \\\n--claim-integration transfer \\\n--transfer-mint So11111111111111111111111111111111111111112\n")),(0,r.kt)("p",null,"However, by default, ",(0,r.kt)("inlineCode",{parentName:"p"},"gumdrop-cli.ts")," will instead transfer the tokens to the\ngenerated throwaway ",(0,r.kt)("inlineCode",{parentName:"p"},"Keypair")," so that multiple gumdrops can be created more\nintuitively. These will be transferred back on ",(0,r.kt)("a",{parentName:"p",href:"#closing-a-gumdrop"},"close")),(0,r.kt)("p",null,"Alternatively, by passing ",(0,r.kt)("inlineCode",{parentName:"p"},"--delegate-only"),", Gumdrop state will be approved as\na ",(0,r.kt)("a",{parentName:"p",href:"https://spl.solana.com/token#authority-delegation"},"delegate")," for the sum of\ntokens specified."),(0,r.kt)("h3",{id:"nft-candy-machine-pre-sale"},"NFT Candy Machine Pre-sale"),(0,r.kt)("p",null,"The workflow for a Candy Machine pre-sale through the Gumdrop program is as\nfollows:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a whitelist mint token ",(0,r.kt)("inlineCode",{parentName:"p"},"WLIST")," with the SPL token program")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a Candy Machine V2 with whitelist mint settings with mint ",(0,r.kt)("inlineCode",{parentName:"p"},"WLIST"),"\n(",(0,r.kt)("a",{parentName:"p",href:"/developer-tools/sugar/"},"Candy Machine Docs"),"). For example,"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "whitelistMintSettings": {\n    "mode": "burnEveryTime",\n    "mint": <WLIST>,\n    "presale": true,\n    "discountPrice": null\n  },\n  ...\n}\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a Gumdrop with ",(0,r.kt)("inlineCode",{parentName:"p"},"--claim-integration candy")," and the corresponding\n",(0,r.kt)("inlineCode",{parentName:"p"},"--candy-machine"),"."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ ts-node src/gumdrop-cli.ts create \\\n--claim-integration candy \\\n--candy-machine FuxMhU34GPggi1yzk8tQwhsLQFR52iiutM5B9nzzeRPa  \\\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"gumdrop-cli.ts")," will parse the on-chain candy machine account and look for\nthe corresponding ",(0,r.kt)("inlineCode",{parentName:"p"},"whitelistMintSettings"),". Then under-the-hood it\ninitializes a token-airdrop for ",(0,r.kt)("inlineCode",{parentName:"p"},"WLIST")," but adds extra information in the\nclaim URL so that frontends can find the corresponding candy crank in\naddition to the whitelist token account. In the produced ",(0,r.kt)("inlineCode",{parentName:"p"},"urls.json"),", this\nwill look something like"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"...\n?distributor=9zXd1NddYbZejacgd92XMQsAQKhXC4Yj9rhUspRyR1ud\\\n&candy=FuxMhU34GPggi1yzk8tQwhsLQFR52iiutM5B9nzzeRPa\\\n&tokenAcc=93fQV4RnstogfFqMstV9b8uAvZ5KsRFjgJUagJhpX2Wa\\\n...\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"On the frontend, users click a button that formats 2 transactions. The first\nclaims the whitelist token gumdrop, and the second uses that token to crank\nthe candy machine."))),(0,r.kt)("h3",{id:"edition-prints"},"Edition Prints"),(0,r.kt)("p",null,"Similarly, the Gumdrop will act as a proxy for the owner of the master edition\nand allow minting of limited editions. Ownership of the master edition will be\ntransferred to the Gumdrop state for the duration of the Gumdrop!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ ts-node src/gumdrop-cli.ts create \\\n--claim-integration edition \\\n--edition-mint 7Hy3FqSQYiXyg4fyobZnSJhMvAqMmraBLaTq9QSFF9ip\n")),(0,r.kt)("p",null,"Closing the Gumdrop will reclaim the master edition."),(0,r.kt)("h2",{id:"distribution-method"},"Distribution Method"),(0,r.kt)("p",null,"The distribution method is used to notify recipients that they have received a\nGumdrop. Currently, the Gumdrop frontends support email, SMS, and discord\nnotifications."),(0,r.kt)("p",null,"For email and SMS,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ ts-node src/gumdrop-cli.ts create \\\n--distribution-method aws-email|aws-sms \\\n--aws-access-key-id "$AWS_ACCESS_KEY_ID" \\\n--aws-secret-access-key "$AWS_SECRET_ACCESS_KEY"\n')),(0,r.kt)("p",null,"For Discord,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ ts-node src/gumdrop-cli.ts create \\\n--distribution-method discord \\\n--discord-token "$DISCORD_TOKEN"\n')),(0,r.kt)("p",null,"With each of these methods, creators can also choose to enable OTP verification\nwith the ",(0,r.kt)("inlineCode",{parentName:"p"},"--otp-auth")," flag. Enable and disable with ",(0,r.kt)("inlineCode",{parentName:"p"},"--otp-auth enable")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"--otp-auth disable")," respectively. In case OTP verification is configured, the\nsame distribution method will be used to verify the OTP."),(0,r.kt)("p",null,"Alternatively, creators can also choose to build the Gumdrop from public keys\nwhich allows only the owner of said public key to claim the Gumdrop.  In\nthis case, the full list of URLs is expected to be uploaded by the creator\nsomewhere."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ ts-node src/gumdrop-cli.ts create \\\n--distribution-method wallets\n")),(0,r.kt)("h2",{id:"whitelist"},"Whitelist"),(0,r.kt)("p",null,"The whitelist is used to specify the recipients of the Gumdrop. Both frontends\nexpect the whitelist to be a JSON list of recipients, each with a ",(0,r.kt)("inlineCode",{parentName:"p"},"handle"),"\nidentifying the user, an ",(0,r.kt)("inlineCode",{parentName:"p"},"amount")," which determines the number of tokens, mints,\nor prints that can be claimed, and in the case of ",(0,r.kt)("a",{parentName:"p",href:"#edition-prints"},"edition\nprints"),", an ",(0,r.kt)("inlineCode",{parentName:"p"},"edition")," number."),(0,r.kt)("p",null,"More concretely, the frontends expect the list format to be"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "handle": "<DISTRIBUTION-METHOD-SPECIFIC-HANDLE>",\n    "amount": <GUMDROP-CLAIM-ALLOWANCE>,\n    ["edition": <EDITION-NUMBER>]\n  },\n  ...\n]\n')),(0,r.kt)("p",null,"The distribution method handles are as follows:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Format"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Email"),(0,r.kt)("td",{parentName:"tr",align:null},"local-part@domain"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"mailto:john.smith@example.com"},"john.smith@example.com"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SMS"),(0,r.kt)("td",{parentName:"tr",align:null},"E.164"),(0,r.kt)("td",{parentName:"tr",align:null},"+18005550100")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Discord"),(0,r.kt)("td",{parentName:"tr",align:null},"User ID"),(0,r.kt)("td",{parentName:"tr",align:null},"898959704573759608")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Wallets"),(0,r.kt)("td",{parentName:"tr",align:null},"wallet public key"),(0,r.kt)("td",{parentName:"tr",align:null},"8mTVkib7TwUSsZRTHDQy9EQbw7ZR7xLrvKeyPgkFPgZB")))),(0,r.kt)("p",null,"At the moment, Discord handles are the hardest to programmatically create. One\noption is to query for members in a Discord Guild and filter for the relevant\nusers by display-name there."),(0,r.kt)("p",null,"The distribution list has to be referenced in the create command like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ ts-node src/gumdrop-cli.ts create \\\n--distribution-list <PATH TO WHITELIST JSON>\n")),(0,r.kt)("p",null,"NB: The frontends do some verification that the Gumdrop being created is\nsufficient to satisfy all the recipients specified. However, these checks are\nall dependent on the good behavior of the creator! For example, if the creator,\nafter creating a token-Gumdrop, moves all the tokens out of their wallet,\nrecipients will fail to claim their allocation."),(0,r.kt)("h2",{id:"closing-a-gumdrop"},"Closing a Gumdrop"),(0,r.kt)("p",null,"When the gumdrop is finished, the master edition can be reclaimed by closing\nthe gumdrop. Currently, the small portion of rent used to store the Gumdrop\nstate is also redeemed but please do not rely on this behavior!"),(0,r.kt)("p",null,"The command to close it is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ts-node gumdrop-cli.ts close \\\n  --base <id.json keypair that was created on gumdrop create> \\\n  --keypair <your initial keypair> \\\n  --claim-integration <creation --claim-integration> \\\n  --<corresponding claim integration flag>\n")),(0,r.kt)("p",null,"We pass additional information about the claim integration to revoke authority\nor transfer back tokens, etc."),(0,r.kt)("p",null,"NB: somewhat obviously, recipients will no longer be able to redeem the Gumdrop\nafter it is closed."),(0,r.kt)("h2",{id:"deploy-custom-gumdrop-site"},"Deploy Custom Gumdrop Site"),(0,r.kt)("p",null,"This method applies to ",(0,r.kt)("em",{parentName:"p"},"only")," ",(0,r.kt)("a",{parentName:"p",href:"https://vercel.com/"},"Vercel"),".  In the ",(0,r.kt)("inlineCode",{parentName:"p"},"gumdrop")," directory, remove ",(0,r.kt)("inlineCode",{parentName:"p"},"homepage")," key-value entirely.  Connect your GitHub to Vercel and create a new project.  In the project setup, make sure these settings are set."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Build and Development Settings",src:n(28617).Z+"#radius#shadow",width:"1508",height:"1098"})),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Root Directory Settings",src:n(30224).Z+"#radius#shadow",width:"1504",height:"592"})))}u.isMDXComponent=!0},28617:function(e,t,n){t.Z=n.p+"assets/images/build-and-development-settings-327f728755a15c48ff3f89dd73e46b60.png"},30224:function(e,t,n){t.Z=n.p+"assets/images/root-directory-f1efe4a67d3892cbff040ac9b40ed575.png"}}]);