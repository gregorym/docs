"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4129],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(n),h=a,f=p["".concat(c,".").concat(h)]||p[h]||u[h]||i;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},16178:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return l}});var r=n(83117),a=(n(67294),n(3905));const i={sidebar_label:"9. Signing Your NFTs"},o="Signing Your NFTs",s={unversionedId:"deprecated/candy-machine-js-cli/sign-nfts",id:"deprecated/candy-machine-js-cli/sign-nfts",title:"Signing Your NFTs",description:"Once you have finished minting, you'll want to proceed to this step. Signing your NFTs allows you to verify the creator. This is important since anyone can list an arbitrary address as a creator. Being verified means that the creator with that wallet address has signed the NFT, proving that they are the actual creator.",source:"@site/docs/06-deprecated/00-candy-machine-js-cli/08-sign-nfts.md",sourceDirName:"06-deprecated/00-candy-machine-js-cli",slug:"/deprecated/candy-machine-js-cli/sign-nfts",permalink:"/deprecated/candy-machine-js-cli/sign-nfts",draft:!1,editUrl:"https://github.com/metaplex/docs/tree/main/docs/06-deprecated/00-candy-machine-js-cli/08-sign-nfts.md",tags:[],version:"current",lastUpdatedAt:1686920843,formattedLastUpdatedAt:"Jun 16, 2023",sidebarPosition:8,frontMatter:{sidebar_label:"9. Signing Your NFTs"},sidebar:"sidebar",previous:{title:"8. Withdraw Rent",permalink:"/deprecated/candy-machine-js-cli/withdraw"},next:{title:"Introduction",permalink:"/deprecated/candy-machine-v1/introduction"}},c={},l=[{value:"Sign",id:"sign",level:3},{value:"Sign All",id:"sign-all",level:3},{value:"Verified",id:"verified",level:3}],d={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"signing-your-nfts"},"Signing Your NFTs"),(0,a.kt)("p",null,"Once you have finished minting, you'll want to proceed to this step. Signing your NFTs allows you to verify the creator. This is important since anyone can list an arbitrary address as a creator. Being verified means that the creator with that wallet address has signed the NFT, proving that they are the actual creator.\nIt is also suggested to use a custom RPC for this step because it is a heavy command."),(0,a.kt)("h3",{id:"sign"},"Sign"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"ts-node ~/deprecated-clis/src/candy-machine-v2-cli.ts sign \\\n    -e devnet \\\n    -k ~/.config/solana/devnet.json \\\n    -m <metadata Address>\n")),(0,a.kt)("h3",{id:"sign-all"},"Sign All"),(0,a.kt)("p",null,"The command that uses ",(0,a.kt)("inlineCode",{parentName:"p"},"sign_all")," can be used to sign an entire collection with the specified keypair."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"ts-node ~/deprecated-clis/src/candy-machine-v2-cli.ts sign_all \\\n    -e devnet \\\n    -k ~/.config/solana/devnet.json \\\n    -c example\n")),(0,a.kt)("h3",{id:"verified"},"Verified"),(0,a.kt)("p",null,"Once verified, the verified value for the second creator will be changed from ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," as shown below. Remember that in the list of creators the first creator is the Candy Machine. If needed, you can specify the batch size using ",(0,a.kt)("inlineCode",{parentName:"p"},"-b"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'"address": //address of the Candy Machine\n"verified": 1\n"share": 0\n\n"address": //Adress of the creator\n"verified": 1 //This creator has been verified.\n"share": 100 //Share of the creator. If you added multiple creators this may be different\n')),(0,a.kt)("p",null,"While the collection hasn't been signed, the verified creator will be the Candy Machine by default. This has the benefit of allowing storefronts, marketplaces, and CLIs to query for NFTs that were minted by a Candy Machine."),(0,a.kt)("p",null,"For more information about this command use ",(0,a.kt)("inlineCode",{parentName:"p"},"-h")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"--help"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"ts-node ~/deprecated-clis/src/candy-machine-v2-cli.ts sign_all -h\n")))}u.isMDXComponent=!0}}]);